import tables
import color

const stringsTableFr* = {
     0x001'u16: "P E A N U T  3000" ,
     0x002'u16: "Copyright  } 1990 Peanut Computer, Inc.\nAll rights reserved.\n\nCDOS Version 5.01" ,
     0x003'u16: "2" ,
     0x004'u16: "3" ,
     0x005'u16: "." ,
     0x006'u16: "A" ,
     0x007'u16: "@" ,
     0x008'u16: "PEANUT 3000" ,
     0x00A'u16: "R" ,
     0x00B'u16: "U" ,
     0x00C'u16: "N" ,
     0x00D'u16: "P" ,
     0x00E'u16: "R" ,
     0x00F'u16: "O" ,
     0x010'u16: "J" ,
     0x011'u16: "E" ,
     0x012'u16: "C" ,
     0x013'u16: "T" ,
     0x014'u16: "Shield 9A.5f Ok" ,
     0x015'u16: "Flux % 5.0177 Ok" ,
     0x016'u16: "CDI Vector ok" ,
     0x017'u16: " %%%ddd ok" ,
     0x018'u16: "Race-Track ok" ,
     0x019'u16: "SYNCHROTRON" ,
     0x01A'u16: "E: 23%\ng: .005\n\nRK: 77.2L\n\nopt: g+\n\n Shield:\n1: OFF\n2: ON\n3: ON\n\nP~: 1\n" ,
     0x01B'u16: "ON" ,
     0x01C'u16: "-" ,
     0x021'u16: "|" ,
     0x022'u16: "--- Etude theorique ---" ,
     0x023'u16: " L'EXPERIENCE DEBUTERA DANS    SECONDES." ,
     0x024'u16: "20" ,
     0x025'u16: "19" ,
     0x026'u16: "18" ,
     0x027'u16: "4" ,
     0x028'u16: "3" ,
     0x029'u16: "2" ,
     0x02A'u16: "1" ,
     0x02B'u16: "0" ,
     0x02C'u16: "L E T ' S   G O" ,
     0x031'u16: "- Phase 0:\nINJECTION des particules\ndans le synchrotron" ,
     0x032'u16: "- Phase 1:\nACCELERATION des particules." ,
     0x033'u16: "- Phase 2:\nEJECTION des particules\nsur le bouclier." ,
     0x034'u16: "A  N  A  L  Y  S  E" ,
     0x035'u16: "- RESULTAT:\nProbabilites de creer de:\n ANTI-MATIERE: 91.V %\n NEUTRINO 27:  0.04 %\n NEUTRINO 424: 18 %\n" ,
     0x036'u16: "Verification par la pratique O/N ?" ,
     0x037'u16: "SUR ?" ,
     0x038'u16: "MODIFICATION DES PARAMETRES\nRELATIFS A L'ACCELERATEUR\nDE PARTICULES (SYNCHROTRON)." ,
     0x039'u16: "SIMULATION DE L'EXPERIENCE ?" ,
     0x03C'u16: "t---t" ,
     0x03D'u16: "000 ~" ,
     0x03E'u16: ".20x14dd" ,
     0x03F'u16: "gj5r5r" ,
     0x040'u16: "tilgor 25%" ,
     0x041'u16: "12% 33% checked" ,
     0x042'u16: "D=4.2158005584" ,
     0x043'u16: "d=10.00001" ,
     0x044'u16: "+" ,
     0x045'u16: "*" ,
     0x046'u16: "% 304" ,
     0x047'u16: "gurgle 21" ,
     0x048'u16: "" ,
     0x049'u16: "Delphine Software" ,
     0x04A'u16: "By Eric Chahi" ,
     0x04B'u16: "5" ,
     0x04C'u16: "17" ,
     0x12C'u16: "0" ,
     0x12D'u16: "1" ,
     0x12E'u16: "2" ,
     0x12F'u16: "3" ,
     0x130'u16: "4" ,
     0x131'u16: "5" ,
     0x132'u16: "6" ,
     0x133'u16: "7" ,
     0x134'u16: "8" ,
     0x135'u16: "9" ,
     0x136'u16: "A" ,
     0x137'u16: "B" ,
     0x138'u16: "C" ,
     0x139'u16: "D" ,
     0x13A'u16: "E" ,
     0x13B'u16: "F" ,
     0x13C'u16: "       CODE D'ACCES:" ,
     0x13D'u16: "PRESSEZ LE BOUTON POUR CONTINUER" ,
     0x13E'u16: "   ENTRER LE CODE D'ACCES" ,
     0x13F'u16: "MOT DE PASSE INVALIDE !" ,
     0x140'u16: "ANNULER" ,
     0x141'u16: "     INSEREZ LA DISQUETTE ?\n\n\n\n\n\n\n\n\nPRESSEZ UNE TOUCHE POUR CONTINUER" ,
     0x142'u16: "SELECTIONNER LES SYMBOLES CORRESPONDANTS\nA LA POSITION\nDE LA ROUE DE PROTECTION" ,
     0x143'u16: "CHARGEMENT..." ,
     0x144'u16: "             ERREUR" ,
     0x15E'u16: "LDKD" ,
     0x15F'u16: "HTDC" ,
     0x160'u16: "CLLD" ,
     0x161'u16: "FXLC" ,
     0x162'u16: "KRFK" ,
     0x163'u16: "XDDJ" ,
     0x164'u16: "LBKG" ,
     0x165'u16: "KLFB" ,
     0x166'u16: "TTCT" ,
     0x167'u16: "DDRX" ,
     0x168'u16: "TBHK" ,
     0x169'u16: "BRTD" ,
     0x16A'u16: "CKJL" ,
     0x16B'u16: "LFCK" ,
     0x16C'u16: "BFLX" ,
     0x16D'u16: "XJRT" ,
     0x16E'u16: "HRTB" ,
     0x16F'u16: "HBHK" ,
     0x170'u16: "JCGB" ,
     0x171'u16: "HHFL" ,
     0x172'u16: "TFBB" ,
     0x173'u16: "TXHF" ,
     0x174'u16: "JHJL" ,
     0x181'u16: "PAR" ,
     0x182'u16: "ERIC CHAHI" ,
     0x183'u16: "          MUSIQUES ET BRUITAGES" ,
     0x184'u16: "DE" ,
     0x185'u16: "JEAN-FRANCOIS FREITAS" ,
     0x186'u16: "VERSION IBM PC" ,
     0x187'u16: "      PAR" ,
     0x188'u16: " DANIEL MORAIS" ,
     0x18B'u16: "PUIS PRESSER LE BOUTON" ,
     0x18C'u16: "POSITIONNER LE JOYSTICK EN HAUT A GAUCHE" ,
     0x18D'u16: " POSITIONNER LE JOYSTICK AU CENTRE" ,
     0x18E'u16: " POSITIONNER LE JOYSTICK EN BAS A DROITE" ,
     0x258'u16: "       Conception ..... Eric Chahi" ,
     0x259'u16: "    Programmation ..... Eric Chahi" ,
     0x25A'u16: "     Graphismes ....... Eric Chahi" ,
     0x25B'u16: "Musique de ...... Jean-francois Freitas" ,
     0x25C'u16: "              Bruitages" ,
     0x25D'u16: "        Jean-Francois Freitas\n             Eric Chahi" ,
     0x263'u16: "               Merci a" ,
     0x264'u16: "           Jesus Martinez\n\n          Daniel Morais\n\n        Frederic Savoir\n\n      Cecile Chahi\n\n    Philippe Delamarre\n\n  Philippe Ulrich\n\nSebastien Berthet\n\nPierre Gousseau" ,
     0x265'u16: "Now Go Back To Another Earth" ,
     0x190'u16: "Bonsoir professeur." ,
     0x191'u16: "Je vois que Monsieur a pris\nsa Ferrari." ,
     0x192'u16: "IDENTIFICATION" ,
     0x193'u16: "Monsieur est en parfaite sante." ,
     0x194'u16: "O" ,
     0x193'u16: "AU BOULOT !!!\n" ,
     0xFFFF'u16: ""
}.toTable

var stringsTableEng* = {
     0x001'u16: "P E A N U T  3000" ,
     0x002'u16: "Copyright  } 1990 Peanut Computer, Inc.\nAll rights reserved.\n\nCDOS Version 5.01" ,
     0x003'u16: "2" ,
     0x004'u16: "3" ,
     0x005'u16: "." ,
     0x006'u16: "A" ,
     0x007'u16: "@" ,
     0x008'u16: "PEANUT 3000" ,
     0x00A'u16: "R" ,
     0x00B'u16: "U" ,
     0x00C'u16: "N" ,
     0x00D'u16: "P" ,
     0x00E'u16: "R" ,
     0x00F'u16: "O" ,
     0x010'u16: "J" ,
     0x011'u16: "E" ,
     0x012'u16: "C" ,
     0x013'u16: "T" ,
     0x014'u16: "Shield 9A.5f Ok" ,
     0x015'u16: "Flux % 5.0177 Ok" ,
     0x016'u16: "CDI Vector ok" ,
     0x017'u16: " %%%ddd ok" ,
     0x018'u16: "Race-Track ok" ,
     0x019'u16: "SYNCHROTRON" ,
     0x01A'u16: "E: 23%\ng: .005\n\nRK: 77.2L\n\nopt: g+\n\n Shield:\n1: OFF\n2: ON\n3: ON\n\nP~: 1\n" ,
     0x01B'u16: "ON" ,
     0x01C'u16: "-" ,
     0x021'u16: "|" ,
     0x022'u16: "--- Theoretical study ---" ,
     0x023'u16: " THE EXPERIMENT WILL BEGIN IN    SECONDS" ,
     0x024'u16: "  20" ,
     0x025'u16: "  19" ,
     0x026'u16: "  18" ,
     0x027'u16: "  4" ,
     0x028'u16: "  3" ,
     0x029'u16: "  2" ,
     0x02A'u16: "  1" ,
     0x02B'u16: "  0" ,
     0x02C'u16: "L E T ' S   G O" ,
     0x031'u16: "- Phase 0:\nINJECTION of particles\ninto synchrotron" ,
     0x032'u16: "- Phase 1:\nParticle ACCELERATION." ,
     0x033'u16: "- Phase 2:\nEJECTION of particles\non the shield." ,
     0x034'u16: "A  N  A  L  Y  S  I  S" ,
     0x035'u16: "- RESULT:\nProbability of creating:\n ANTIMATTER: 91.V %\n NEUTRINO 27:  0.04 %\n NEUTRINO 424: 18 %\n" ,
     0x036'u16: "   Practical verification Y/N ?" ,
     0x037'u16: "SURE ?" ,
     0x038'u16: "MODIFICATION OF PARAMETERS\nRELATING TO PARTICLE\nACCELERATOR (SYNCHROTRON)." ,
     0x039'u16: "       RUN EXPERIMENT ?" ,
     0x03C'u16: "t---t" ,
     0x03D'u16: "000 ~" ,
     0x03E'u16: ".20x14dd" ,
     0x03F'u16: "gj5r5r" ,
     0x040'u16: "tilgor 25%" ,
     0x041'u16: "12% 33% checked" ,
     0x042'u16: "D=4.2158005584" ,
     0x043'u16: "d=10.00001" ,
     0x044'u16: "+" ,
     0x045'u16: "*" ,
     0x046'u16: "% 304" ,
     0x047'u16: "gurgle 21" ,
     0x048'u16: "" ,
     0x049'u16: "Delphine Software" ,
     0x04A'u16: "By Eric Chahi" ,
     0x04B'u16: "  5" ,
     0x04C'u16: "  17" ,
     0x12C'u16: "0" ,
     0x12D'u16: "1" ,
     0x12E'u16: "2" ,
     0x12F'u16: "3" ,
     0x130'u16: "4" ,
     0x131'u16: "5" ,
     0x132'u16: "6" ,
     0x133'u16: "7" ,
     0x134'u16: "8" ,
     0x135'u16: "9" ,
     0x136'u16: "A" ,
     0x137'u16: "B" ,
     0x138'u16: "C" ,
     0x139'u16: "D" ,
     0x13A'u16: "E" ,
     0x13B'u16: "F" ,
     0x13C'u16: "        ACCESS CODE:" ,
     0x13D'u16: "PRESS BUTTON OR RETURN TO CONTINUE" ,
     0x13E'u16: "   ENTER ACCESS CODE" ,
     0x13F'u16: "   INVALID PASSWORD !" ,
     0x140'u16: "ANNULER" ,
     0x141'u16: "      INSERT DISK ?\n\n\n\n\n\n\n\n\nPRESS ANY KEY TO CONTINUE" ,
     0x142'u16: " SELECT SYMBOLS CORRESPONDING TO\n THE POSITION\n ON THE CODE WHEEL" ,
     0x143'u16: "    LOADING..." ,
     0x144'u16: "              ERROR" ,
     0x15E'u16: "LDKD" ,
     0x15F'u16: "HTDC" ,
     0x160'u16: "CLLD" ,
     0x161'u16: "FXLC" ,
     0x162'u16: "KRFK" ,
     0x163'u16: "XDDJ" ,
     0x164'u16: "LBKG" ,
     0x165'u16: "KLFB" ,
     0x166'u16: "TTCT" ,
     0x167'u16: "DDRX" ,
     0x168'u16: "TBHK" ,
     0x169'u16: "BRTD" ,
     0x16A'u16: "CKJL" ,
     0x16B'u16: "LFCK" ,
     0x16C'u16: "BFLX" ,
     0x16D'u16: "XJRT" ,
     0x16E'u16: "HRTB" ,
     0x16F'u16: "HBHK" ,
     0x170'u16: "JCGB" ,
     0x171'u16: "HHFL" ,
     0x172'u16: "TFBB" ,
     0x173'u16: "TXHF" ,
     0x174'u16: "JHJL" ,
     0x181'u16: " BY" ,
     0x182'u16: "ERIC CHAHI" ,
     0x183'u16: "         MUSIC AND SOUND EFFECTS" ,
     0x184'u16: " " ,
     0x185'u16: "JEAN-FRANCOIS FREITAS" ,
     0x186'u16: "IBM PC VERSION" ,
     0x187'u16: "      BY" ,
     0x188'u16: " DANIEL MORAIS" ,
     0x18B'u16: "       THEN PRESS FIRE" ,
     0x18C'u16: " PUT THE PADDLE ON THE UPPER LEFT CORNER" ,
     0x18D'u16: "PUT THE PADDLE IN CENTRAL POSITION" ,
     0x18E'u16: "PUT THE PADDLE ON THE LOWER RIGHT CORNER" ,
     0x258'u16: "      Designed by ..... Eric Chahi" ,
     0x259'u16: "    Programmed by...... Eric Chahi" ,
     0x25A'u16: "      Artwork ......... Eric Chahi" ,
     0x25B'u16: "Music by ........ Jean-francois Freitas" ,
     0x25C'u16: "            Sound effects" ,
     0x25D'u16: "        Jean-Francois Freitas\n             Eric Chahi" ,
     0x263'u16: "              Thanks To" ,
     0x264'u16: "           Jesus Martinez\n\n          Daniel Morais\n\n        Frederic Savoir\n\n      Cecile Chahi\n\n    Philippe Delamarre\n\n  Philippe Ulrich\n\nSebastien Berthet\n\nPierre Gousseau" ,
     0x265'u16: "Now Go Out Of This World" ,
     0x190'u16: "Good evening professor." ,
     0x191'u16: "I see you have driven here in your\nFerrari." ,
     0x192'u16: "IDENTIFICATION" ,
     0x193'u16: "Monsieur est en parfaite sante." ,
     0x194'u16: "Y\n" ,
     0x193'u16: "AU BOULOT !!!\n" ,
     0xFFFF'u16: ""
}.toTable

const font*: array[768, byte] = [
    0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00,
    0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x7E, 0x24, 0x24, 0x7E, 0x24, 0x00,
    0x08, 0x3E, 0x48, 0x3C, 0x12, 0x7C, 0x10, 0x00, 0x42, 0xA4, 0x48, 0x10, 0x24, 0x4A, 0x84, 0x00,
    0x60, 0x90, 0x90, 0x70, 0x8A, 0x84, 0x7A, 0x00, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x08, 0x10, 0x10, 0x10, 0x08, 0x06, 0x00, 0xC0, 0x20, 0x10, 0x10, 0x10, 0x20, 0xC0, 0x00,
    0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x10, 0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00,
    0x78, 0x84, 0x8C, 0x94, 0xA4, 0xC4, 0x78, 0x00, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x7C, 0x00,
    0x78, 0x84, 0x04, 0x08, 0x30, 0x40, 0xFC, 0x00, 0x78, 0x84, 0x04, 0x38, 0x04, 0x84, 0x78, 0x00,
    0x08, 0x18, 0x28, 0x48, 0xFC, 0x08, 0x08, 0x00, 0xFC, 0x80, 0xF8, 0x04, 0x04, 0x84, 0x78, 0x00,
    0x38, 0x40, 0x80, 0xF8, 0x84, 0x84, 0x78, 0x00, 0xFC, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00,
    0x78, 0x84, 0x84, 0x78, 0x84, 0x84, 0x78, 0x00, 0x78, 0x84, 0x84, 0x7C, 0x04, 0x08, 0x70, 0x00,
    0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x10, 0x10, 0x60,
    0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00,
    0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x00, 0x7C, 0x82, 0x02, 0x0C, 0x10, 0x00, 0x10, 0x00,
    0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x78, 0x84, 0x84, 0xFC, 0x84, 0x84, 0x84, 0x00,
    0xF8, 0x84, 0x84, 0xF8, 0x84, 0x84, 0xF8, 0x00, 0x78, 0x84, 0x80, 0x80, 0x80, 0x84, 0x78, 0x00,
    0xF8, 0x84, 0x84, 0x84, 0x84, 0x84, 0xF8, 0x00, 0x7C, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7C, 0x00,
    0xFC, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x7C, 0x80, 0x80, 0x8C, 0x84, 0x84, 0x7C, 0x00,
    0x84, 0x84, 0x84, 0xFC, 0x84, 0x84, 0x84, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00,
    0x04, 0x04, 0x04, 0x04, 0x84, 0x84, 0x78, 0x00, 0x8C, 0x90, 0xA0, 0xE0, 0x90, 0x88, 0x84, 0x00,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFC, 0x00, 0x82, 0xC6, 0xAA, 0x92, 0x82, 0x82, 0x82, 0x00,
    0x84, 0xC4, 0xA4, 0x94, 0x8C, 0x84, 0x84, 0x00, 0x78, 0x84, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00,
    0xF8, 0x84, 0x84, 0xF8, 0x80, 0x80, 0x80, 0x00, 0x78, 0x84, 0x84, 0x84, 0x84, 0x8C, 0x7C, 0x03,
    0xF8, 0x84, 0x84, 0xF8, 0x90, 0x88, 0x84, 0x00, 0x78, 0x84, 0x80, 0x78, 0x04, 0x84, 0x78, 0x00,
    0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00,
    0x84, 0x84, 0x84, 0x84, 0x84, 0x48, 0x30, 0x00, 0x82, 0x82, 0x82, 0x82, 0x92, 0xAA, 0xC6, 0x00,
    0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, 0x00, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00,
    0xFC, 0x04, 0x08, 0x10, 0x20, 0x40, 0xFC, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00,
    0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00,
    0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
    0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3C, 0x00,
    0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x78, 0x00, 0x00, 0x00, 0x3C, 0x40, 0x40, 0x40, 0x3C, 0x00,
    0x04, 0x04, 0x3C, 0x44, 0x44, 0x44, 0x3C, 0x00, 0x00, 0x00, 0x38, 0x44, 0x7C, 0x40, 0x3C, 0x00,
    0x38, 0x44, 0x40, 0x60, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x78,
    0x40, 0x40, 0x58, 0x64, 0x44, 0x44, 0x44, 0x00, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,
    0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x42, 0x3C, 0x40, 0x40, 0x46, 0x48, 0x70, 0x48, 0x46, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0xEC, 0x92, 0x92, 0x92, 0x92, 0x00,
    0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00,
    0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x04,
    0x00, 0x00, 0x4C, 0x70, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x3C, 0x40, 0x38, 0x04, 0x78, 0x00,
    0x10, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x0C, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x78, 0x00,
    0x00, 0x00, 0x44, 0x44, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00, 0x82, 0x82, 0x92, 0xAA, 0xC6, 0x00,
    0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x42, 0x22, 0x24, 0x18, 0x08, 0x30,
    0x00, 0x00, 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00, 0x60, 0x90, 0x20, 0x40, 0xF0, 0x00, 0x00, 0x00,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x38, 0x44, 0xBA, 0xA2, 0xBA, 0x44, 0x38, 0x00,
    0x38, 0x44, 0x82, 0x82, 0x44, 0x28, 0xEE, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA
]


const freqTable*: array[40,uint16] = [
    0x0CFF'u16, 0x0DC3, 0x0E91, 0x0F6F, 0x1056, 0x114E, 0x1259, 0x136C, 
    0x149F, 0x15D9, 0x1726, 0x1888, 0x19FD, 0x1B86, 0x1D21, 0x1EDE, 
    0x20AB, 0x229C, 0x24B3, 0x26D7, 0x293F, 0x2BB2, 0x2E4C, 0x3110, 
    0x33FB, 0x370D, 0x3A43, 0x3DDF, 0x4157, 0x4538, 0x4998, 0x4DAE, 
    0x5240, 0x5764, 0x5C9A, 0x61C8, 0x6793, 0x6E19, 0x7485, 0x7BBD
]

const paletteEGA*: array[16, Color] = [
    Color(r: 0x00'u8, g: 0x00'u8, b: 0x00'u8), # black #0
    Color(r: 0x00'u8, g: 0x00'u8, b: 0xAA'u8), # blue #1
    Color(r: 0x00'u8, g: 0xAA'u8, b: 0x00'u8), # green #2
    Color(r: 0x00'u8, g: 0xAA'u8, b: 0xAA'u8), # cyan #3
    Color(r: 0xAA'u8, g: 0x00'u8, b: 0x00'u8), # red #4
    Color(r: 0xAA'u8, g: 0x00'u8, b: 0xAA'u8), # magenta #5
    Color(r: 0xAA'u8, g: 0x55'u8, b: 0x00'u8), # yellow, brown #20
    Color(r: 0xAA'u8, g: 0xAA'u8, b: 0xAA'u8), # white, light gray #7
    Color(r: 0x55'u8, g: 0x55'u8, b: 0x55'u8), # dark gray, bright black #56
    Color(r: 0x55'u8, g: 0x55'u8, b: 0xFF'u8), # bright blue #57
    Color(r: 0x55'u8, g: 0xFF'u8, b: 0x55'u8), # bright green #58
    Color(r: 0x55'u8, g: 0xFF'u8, b: 0xFF'u8), # bright cyan #59
    Color(r: 0xFF'u8, g: 0x55'u8, b: 0x55'u8), # bright red #60
    Color(r: 0xFF'u8, g: 0x55'u8, b: 0xFF'u8), # bright magenta #61
    Color(r: 0xFF'u8, g: 0xFF'u8, b: 0x55'u8), # bright yellow #62
    Color(r: 0xFF'u8, g: 0xFF'u8, b: 0xFF'u8), # bright white #63
]

type
    AmigaMemEntry* = object
        entryType*: byte
        bank*: byte
        offset*: uint32
        packedSize*: uint32
        unpackedSize*: uint32
    AmigaMemEntries* = array[146, AmigaMemEntry]

proc newAmigaMemEntry(entryType, bank: byte, offset, packedSize, unpackedSize: uint32): AmigaMemEntry =
    AmigaMemEntry(entryType: entryType, bank: bank, offset: offset, packedSize: packedSize, unpackedSize: unpackedSize)

const memListAmigaFr*: AmigaMemEntries = [
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x1A3C, 0x1A3C),
    newAmigaMemEntry(0, 0x1, 0x001A3C, 0x2E34, 0x2E34),
    newAmigaMemEntry(0, 0x1, 0x004870, 0x69F8, 0x69F8),
    newAmigaMemEntry(0, 0x1, 0x00B268, 0x45CE, 0x45CE),
    newAmigaMemEntry(0, 0x1, 0x00F836, 0x0EFA, 0x0EFA),
    newAmigaMemEntry(0, 0x1, 0x010730, 0x0D26, 0x0D26),
    newAmigaMemEntry(1, 0x1, 0x011456, 0x0494, 0x3CC0),
    newAmigaMemEntry(0, 0x2, 0x000000, 0x2674, 0x2674),
    newAmigaMemEntry(0, 0x1, 0x0118EA, 0x2BB6, 0x2BB6),
    newAmigaMemEntry(0, 0x1, 0x0144A0, 0x2BB4, 0x2BB4),
    newAmigaMemEntry(0, 0x1, 0x017054, 0x0426, 0x0426),
    newAmigaMemEntry(0, 0x1, 0x01747A, 0x1852, 0x1852),
    newAmigaMemEntry(0, 0x1, 0x018CCC, 0x0594, 0x0594),
    newAmigaMemEntry(0, 0x1, 0x019260, 0x13F0, 0x13F0),
    newAmigaMemEntry(0, 0x1, 0x01A650, 0x079E, 0x079E),
    newAmigaMemEntry(0, 0x2, 0x002674, 0x56A2, 0x56A2),
    newAmigaMemEntry(6, 0xC, 0x000000, 0x6214, 0x6214),
    newAmigaMemEntry(2, 0x5, 0x000000, 0x2410, 0x7D00),
    newAmigaMemEntry(2, 0x5, 0x002410, 0x7D00, 0x7D00),
    newAmigaMemEntry(3, 0x1, 0x01ADEE, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x1, 0x01B5EE, 0x0D2A, 0x0D2A),
    newAmigaMemEntry(5, 0x1, 0x01C318, 0x107C, 0x107C),
    newAmigaMemEntry(3, 0x1, 0x01D394, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x1, 0x01DB94, 0x2530, 0x2530),
    newAmigaMemEntry(5, 0x1, 0x0200C4, 0xFE7A, 0xFE7A),
    newAmigaMemEntry(3, 0x2, 0x007D16, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x2, 0x008516, 0x4BD0, 0x4BD0),
    newAmigaMemEntry(5, 0x2, 0x00D0E6, 0xFDBA, 0xFDBA),
    newAmigaMemEntry(3, 0xD, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xD, 0x000800, 0x974A, 0x974A),
    newAmigaMemEntry(5, 0xD, 0x009F4A, 0xD1D8, 0xD1D8),
    newAmigaMemEntry(3, 0x3, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x3, 0x000800, 0xED30, 0xED30),
    newAmigaMemEntry(5, 0x3, 0x00F530, 0xFEF6, 0xFEF6),
    newAmigaMemEntry(3, 0xA, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xA, 0x000800, 0x1B00, 0x1B00),
    newAmigaMemEntry(5, 0xA, 0x002300, 0x5E58, 0x5E58),
    newAmigaMemEntry(3, 0xA, 0x008158, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xA, 0x008958, 0x99D8, 0x99D8),
    newAmigaMemEntry(5, 0xA, 0x012330, 0xFF9A, 0xFF9A),
    newAmigaMemEntry(3, 0xB, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xB, 0x000800, 0x09F4, 0x09F4),
    newAmigaMemEntry(5, 0xB, 0x0011F4, 0x4E36, 0x4E36),
    newAmigaMemEntry(0, 0x1, 0x02FF3E, 0x0372, 0x0372),
    newAmigaMemEntry(0, 0x2, 0x01CEA0, 0x1E04, 0x1E04),
    newAmigaMemEntry(0, 0x1, 0x0302B0, 0x08EA, 0x08EA),
    newAmigaMemEntry(0, 0x1, 0x030B9A, 0x1A46, 0x1A46),
    newAmigaMemEntry(0, 0x2, 0x01ECA4, 0x343E, 0x343E),
    newAmigaMemEntry(0, 0x2, 0x0220E2, 0x149E, 0x149E),
    newAmigaMemEntry(0, 0x2, 0x023580, 0x1866, 0x1866),
    newAmigaMemEntry(0, 0x1, 0x0325E0, 0x0266, 0x0266),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x2, 0x024DE6, 0x01A8, 0x01A8),
    newAmigaMemEntry(0, 0x1, 0x032846, 0x1FEC, 0x1FEC),
    newAmigaMemEntry(0, 0x2, 0x024F8E, 0x13A4, 0x13A4),
    newAmigaMemEntry(0, 0x2, 0x026332, 0x15C4, 0x15C4),
    newAmigaMemEntry(0, 0x2, 0x0278F6, 0x0E2A, 0x0E2A),
    newAmigaMemEntry(0, 0x2, 0x028720, 0x0366, 0x0366),
    newAmigaMemEntry(0, 0x2, 0x028A86, 0x0078, 0x0078),
    newAmigaMemEntry(0, 0x2, 0x028AFE, 0x1392, 0x1392),
    newAmigaMemEntry(0, 0x2, 0x029E90, 0x06E0, 0x06E0),
    newAmigaMemEntry(0, 0x2, 0x02A570, 0x21AE, 0x21AE),
    newAmigaMemEntry(0, 0x1, 0x034832, 0x04FA, 0x04FA),
    newAmigaMemEntry(0, 0x1, 0x034D2C, 0x129E, 0x129E),
    newAmigaMemEntry(0, 0x1, 0x035FCA, 0x09B4, 0x09B4),
    newAmigaMemEntry(0, 0x2, 0x02C71E, 0x04EC, 0x04EC),
    newAmigaMemEntry(2, 0x4, 0x000000, 0x28FC, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x0028FC, 0x1C2C, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x004528, 0x1F20, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x006448, 0x22A8, 0x7D00),
    newAmigaMemEntry(2, 0x1, 0x03697E, 0x033C, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x0086F0, 0x2DA4, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x00B494, 0x3008, 0x7D00),
    newAmigaMemEntry(0, 0x2, 0x02CC0A, 0x03C0, 0x03C0),
    newAmigaMemEntry(0, 0x2, 0x02CFCA, 0x13E6, 0x13E6),
    newAmigaMemEntry(0, 0x2, 0x02E3B0, 0x04DE, 0x04DE),
    newAmigaMemEntry(0, 0x2, 0x02E88E, 0x05FA, 0x05FA),
    newAmigaMemEntry(0, 0x2, 0x02EE88, 0x025E, 0x025E),
    newAmigaMemEntry(0, 0x2, 0x02F0E6, 0x0642, 0x0642),
    newAmigaMemEntry(0, 0x2, 0x02F728, 0x19D0, 0x19D0),
    newAmigaMemEntry(0, 0x2, 0x0310F8, 0x00E8, 0x00E8),
    newAmigaMemEntry(0, 0x6, 0x000000, 0x1022, 0x1022),
    newAmigaMemEntry(2, 0x1, 0x036CBA, 0x1A8C, 0x7D00),
    newAmigaMemEntry(0, 0x2, 0x0311E0, 0x58AA, 0x58AA),
    newAmigaMemEntry(0, 0x6, 0x001022, 0x0990, 0x0990),
    newAmigaMemEntry(0, 0x6, 0x0019B2, 0x2C42, 0x2C42),
    newAmigaMemEntry(0, 0x6, 0x0045F4, 0x152C, 0x152C),
    newAmigaMemEntry(0, 0x6, 0x005B20, 0x05B4, 0x05B4),
    newAmigaMemEntry(0, 0x6, 0x0060D4, 0x23B4, 0x23B4),
    newAmigaMemEntry(0, 0x6, 0x008488, 0x1FA4, 0x1FA4),
    newAmigaMemEntry(0, 0x6, 0x00A42C, 0x0D20, 0x0D20),
    newAmigaMemEntry(0, 0x6, 0x00B14C, 0x0528, 0x0528),
    newAmigaMemEntry(0, 0x6, 0x00B674, 0x1608, 0x1608),
    newAmigaMemEntry(0, 0x6, 0x00CC7C, 0x01EA, 0x01EA),
    newAmigaMemEntry(0, 0x6, 0x00CE66, 0x07EA, 0x07EA),
    newAmigaMemEntry(0, 0x6, 0x00D650, 0x00E8, 0x00E8),
    newAmigaMemEntry(0, 0x7, 0x000000, 0x3978, 0x3978),
    newAmigaMemEntry(0, 0x7, 0x003978, 0x1178, 0x1178),
    newAmigaMemEntry(0, 0x7, 0x004AF0, 0x14B0, 0x14B0),
    newAmigaMemEntry(0, 0x7, 0x005FA0, 0x0AA4, 0x0AA4),
    newAmigaMemEntry(0, 0x7, 0x006A44, 0x02DA, 0x02DA),
    newAmigaMemEntry(0, 0x7, 0x006D1E, 0x2674, 0x2674),
    newAmigaMemEntry(0, 0x7, 0x009392, 0x12F0, 0x12F0),
    newAmigaMemEntry(0, 0x7, 0x00A682, 0x5D58, 0x5D58),
    newAmigaMemEntry(0, 0x7, 0x0103DA, 0xA222, 0xA222),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x2E68, 0x2E68),
    newAmigaMemEntry(0, 0x8, 0x002E68, 0x51C6, 0x51C6),
    newAmigaMemEntry(0, 0x8, 0x00802E, 0x13E6, 0x13E6),
    newAmigaMemEntry(0, 0x8, 0x009414, 0x149E, 0x149E),
    newAmigaMemEntry(0, 0x8, 0x00A8B2, 0x58AA, 0x58AA),
    newAmigaMemEntry(0, 0x8, 0x01015C, 0x445C, 0x445C),
    newAmigaMemEntry(0, 0x7, 0x01A5FC, 0x0D90, 0x0D90),
    newAmigaMemEntry(0, 0x7, 0x01B38C, 0x09E4, 0x09E4),
    newAmigaMemEntry(0, 0x7, 0x01BD70, 0x198A, 0x198A),
    newAmigaMemEntry(0, 0x7, 0x01D6FA, 0x25D2, 0x25D2),
    newAmigaMemEntry(0, 0x8, 0x0145B8, 0x2430, 0x2430),
    newAmigaMemEntry(0, 0x8, 0x0169E8, 0x1316, 0x1316),
    newAmigaMemEntry(0, 0x8, 0x017CFE, 0x0220, 0x0220),
    newAmigaMemEntry(0, 0x8, 0x017F1E, 0x05EA, 0x05EA),
    newAmigaMemEntry(0, 0x8, 0x018508, 0x043C, 0x043C),
    newAmigaMemEntry(0, 0x8, 0x018944, 0x08EA, 0x08EA),
    newAmigaMemEntry(0, 0x8, 0x01922E, 0x1478, 0x1478),
    newAmigaMemEntry(0, 0x8, 0x01A6A6, 0x432E, 0x432E),
    newAmigaMemEntry(0, 0x8, 0x01E9D4, 0x06CE, 0x06CE),
    newAmigaMemEntry(3, 0x9, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x9, 0x000800, 0x0CC6, 0x0CC6),
    newAmigaMemEntry(5, 0x9, 0x0014C6, 0x13B8, 0x13B8),
    newAmigaMemEntry(0, 0x1, 0x038746, 0x189A, 0x189A),
    newAmigaMemEntry(0, 0x1, 0x039FE0, 0x07D8, 0x07D8),
    newAmigaMemEntry(0, 0x1, 0x03A7B8, 0x0462, 0x0462),
    newAmigaMemEntry(0, 0x1, 0x03AC1A, 0x0FA8, 0x0FA8),
    newAmigaMemEntry(0, 0xA, 0x0222CA, 0x672E, 0x672E),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x01F0A2, 0x247C, 0x247C),
    newAmigaMemEntry(1, 0x2, 0x036A8A, 0x08C0, 0x08C0),
    newAmigaMemEntry(1, 0xB, 0x00602A, 0x08C4, 0x3CC0),
    newAmigaMemEntry(0, 0xA, 0x0289F8, 0x4F5A, 0x4F5A),
    newAmigaMemEntry(0, 0xA, 0x02D952, 0x4418, 0x4418),
    newAmigaMemEntry(0, 0xA, 0x031D6A, 0x293C, 0x293C),
    newAmigaMemEntry(0, 0xA, 0x0346A6, 0x3FC8, 0x3FC8),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(2, 0xB, 0x0068EE, 0x2F94, 0x7D00),
    newAmigaMemEntry(2, 0xB, 0x009882, 0x33C0, 0x7D00),
]

const memListAmigaEn*: AmigaMemEntries = [
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x1A3C, 0x1A3C),
    newAmigaMemEntry(0, 0x1, 0x001A3C, 0x2E34, 0x2E34),
    newAmigaMemEntry(0, 0x1, 0x004870, 0x69F8, 0x69F8),
    newAmigaMemEntry(0, 0x1, 0x00B268, 0x45CE, 0x45CE),
    newAmigaMemEntry(0, 0x1, 0x00F836, 0x0EFA, 0x0EFA),
    newAmigaMemEntry(0, 0x1, 0x010730, 0x0D26, 0x0D26),
    newAmigaMemEntry(1, 0x1, 0x011456, 0x0494, 0x3CC0),
    newAmigaMemEntry(0, 0x2, 0x000000, 0x2674, 0x2674),
    newAmigaMemEntry(0, 0x1, 0x0118EA, 0x2BB6, 0x2BB6),
    newAmigaMemEntry(0, 0x1, 0x0144A0, 0x2BB4, 0x2BB4),
    newAmigaMemEntry(0, 0x1, 0x017054, 0x0426, 0x0426),
    newAmigaMemEntry(0, 0x1, 0x01747A, 0x1852, 0x1852),
    newAmigaMemEntry(0, 0x1, 0x018CCC, 0x0594, 0x0594),
    newAmigaMemEntry(0, 0x1, 0x019260, 0x13F0, 0x13F0),
    newAmigaMemEntry(0, 0x1, 0x01A650, 0x079E, 0x079E),
    newAmigaMemEntry(0, 0x2, 0x002674, 0x56A2, 0x56A2),
    newAmigaMemEntry(6, 0xC, 0x000000, 0x6214, 0x6214),
    newAmigaMemEntry(2, 0x5, 0x000000, 0x2410, 0x7D00),
    newAmigaMemEntry(2, 0x5, 0x002410, 0x7D00, 0x7D00),
    newAmigaMemEntry(3, 0x1, 0x01ADEE, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x1, 0x01B5EE, 0x0DD8, 0x0DD8),
    newAmigaMemEntry(5, 0x1, 0x01C3C6, 0x1090, 0x1090),
    newAmigaMemEntry(3, 0x1, 0x01D456, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x1, 0x01DC56, 0x2530, 0x2530),
    newAmigaMemEntry(5, 0x1, 0x020186, 0xFE7A, 0xFE7A),
    newAmigaMemEntry(3, 0x2, 0x007D16, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x2, 0x008516, 0x4C02, 0x4C02),
    newAmigaMemEntry(5, 0x2, 0x00D118, 0xFDBA, 0xFDBA),
    newAmigaMemEntry(3, 0xD, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xD, 0x000800, 0x98B6, 0x98B6),
    newAmigaMemEntry(5, 0xD, 0x00A0B6, 0xD1D8, 0xD1D8),
    newAmigaMemEntry(3, 0x3, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x3, 0x000800, 0xEE5E, 0xEE5E),
    newAmigaMemEntry(5, 0x3, 0x00F65E, 0xFD08, 0xFD08),
    newAmigaMemEntry(3, 0xA, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xA, 0x000800, 0x1B00, 0x1B00),
    newAmigaMemEntry(5, 0xA, 0x002300, 0x5E58, 0x5E58),
    newAmigaMemEntry(3, 0xA, 0x008158, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xA, 0x008958, 0x99DC, 0x99DC),
    newAmigaMemEntry(5, 0xA, 0x012334, 0xFF9A, 0xFF9A),
    newAmigaMemEntry(3, 0xB, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xB, 0x000800, 0x09F4, 0x09F4),
    newAmigaMemEntry(5, 0xB, 0x0011F4, 0x4E3A, 0x4E3A),
    newAmigaMemEntry(0, 0x1, 0x030000, 0x0372, 0x0372),
    newAmigaMemEntry(0, 0x2, 0x01CED2, 0x1E04, 0x1E04),
    newAmigaMemEntry(0, 0x1, 0x030372, 0x08EA, 0x08EA),
    newAmigaMemEntry(0, 0x1, 0x030C5C, 0x1A46, 0x1A46),
    newAmigaMemEntry(0, 0x2, 0x01ECD6, 0x343E, 0x343E),
    newAmigaMemEntry(0, 0x2, 0x022114, 0x149E, 0x149E),
    newAmigaMemEntry(0, 0x2, 0x0235B2, 0x1866, 0x1866),
    newAmigaMemEntry(0, 0x1, 0x0326A2, 0x0266, 0x0266),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x2, 0x024E18, 0x01A8, 0x01A8),
    newAmigaMemEntry(0, 0x1, 0x032908, 0x1FEC, 0x1FEC),
    newAmigaMemEntry(0, 0x2, 0x024FC0, 0x13A4, 0x13A4),
    newAmigaMemEntry(0, 0x2, 0x026364, 0x15C4, 0x15C4),
    newAmigaMemEntry(0, 0x2, 0x027928, 0x0E2A, 0x0E2A),
    newAmigaMemEntry(0, 0x2, 0x028752, 0x0366, 0x0366),
    newAmigaMemEntry(0, 0x2, 0x028AB8, 0x0078, 0x0078),
    newAmigaMemEntry(0, 0x2, 0x028B30, 0x1392, 0x1392),
    newAmigaMemEntry(0, 0x2, 0x029EC2, 0x06E0, 0x06E0),
    newAmigaMemEntry(0, 0x2, 0x02A5A2, 0x21AE, 0x21AE),
    newAmigaMemEntry(0, 0x1, 0x0348F4, 0x04FA, 0x04FA),
    newAmigaMemEntry(0, 0x1, 0x034DEE, 0x129E, 0x129E),
    newAmigaMemEntry(0, 0x1, 0x03608C, 0x09B4, 0x09B4),
    newAmigaMemEntry(0, 0x2, 0x02C750, 0x04EC, 0x04EC),
    newAmigaMemEntry(2, 0x4, 0x000000, 0x28FC, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x0028FC, 0x1C2C, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x004528, 0x1F20, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x006448, 0x22A8, 0x7D00),
    newAmigaMemEntry(2, 0x1, 0x036A40, 0x033C, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x0086F0, 0x2DA4, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x00B494, 0x3008, 0x7D00),
    newAmigaMemEntry(0, 0x2, 0x02CC3C, 0x03C0, 0x03C0),
    newAmigaMemEntry(0, 0x2, 0x02CFFC, 0x13E6, 0x13E6),
    newAmigaMemEntry(0, 0x2, 0x02E3E2, 0x04DE, 0x04DE),
    newAmigaMemEntry(0, 0x2, 0x02E8C0, 0x05FA, 0x05FA),
    newAmigaMemEntry(0, 0x2, 0x02EEBA, 0x025E, 0x025E),
    newAmigaMemEntry(0, 0x2, 0x02F118, 0x0642, 0x0642),
    newAmigaMemEntry(0, 0x2, 0x02F75A, 0x19D0, 0x19D0),
    newAmigaMemEntry(0, 0x2, 0x03112A, 0x00E8, 0x00E8),
    newAmigaMemEntry(0, 0x6, 0x000000, 0x1022, 0x1022),
    newAmigaMemEntry(2, 0x1, 0x036D7C, 0x1A8C, 0x7D00),
    newAmigaMemEntry(0, 0x2, 0x031212, 0x58AA, 0x58AA),
    newAmigaMemEntry(0, 0x6, 0x001022, 0x0990, 0x0990),
    newAmigaMemEntry(0, 0x6, 0x0019B2, 0x2C42, 0x2C42),
    newAmigaMemEntry(0, 0x6, 0x0045F4, 0x152C, 0x152C),
    newAmigaMemEntry(0, 0x6, 0x005B20, 0x05B4, 0x05B4),
    newAmigaMemEntry(0, 0x6, 0x0060D4, 0x23B4, 0x23B4),
    newAmigaMemEntry(0, 0x6, 0x008488, 0x1FA4, 0x1FA4),
    newAmigaMemEntry(0, 0x6, 0x00A42C, 0x0D20, 0x0D20),
    newAmigaMemEntry(0, 0x6, 0x00B14C, 0x0528, 0x0528),
    newAmigaMemEntry(0, 0x6, 0x00B674, 0x1608, 0x1608),
    newAmigaMemEntry(0, 0x6, 0x00CC7C, 0x01EA, 0x01EA),
    newAmigaMemEntry(0, 0x6, 0x00CE66, 0x07EA, 0x07EA),
    newAmigaMemEntry(0, 0x6, 0x00D650, 0x00E8, 0x00E8),
    newAmigaMemEntry(0, 0x7, 0x000000, 0x3978, 0x3978),
    newAmigaMemEntry(0, 0x7, 0x003978, 0x1178, 0x1178),
    newAmigaMemEntry(0, 0x7, 0x004AF0, 0x14B0, 0x14B0),
    newAmigaMemEntry(0, 0x7, 0x005FA0, 0x0AA4, 0x0AA4),
    newAmigaMemEntry(0, 0x7, 0x006A44, 0x02DA, 0x02DA),
    newAmigaMemEntry(0, 0x7, 0x006D1E, 0x2674, 0x2674),
    newAmigaMemEntry(0, 0x7, 0x009392, 0x12F0, 0x12F0),
    newAmigaMemEntry(0, 0x7, 0x00A682, 0x5D58, 0x5D58),
    newAmigaMemEntry(0, 0x7, 0x0103DA, 0xA222, 0xA222),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x2E68, 0x2E68),
    newAmigaMemEntry(0, 0x8, 0x002E68, 0x51C6, 0x51C6),
    newAmigaMemEntry(0, 0x8, 0x00802E, 0x13E6, 0x13E6),
    newAmigaMemEntry(0, 0x8, 0x009414, 0x149E, 0x149E),
    newAmigaMemEntry(0, 0x8, 0x00A8B2, 0x58AA, 0x58AA),
    newAmigaMemEntry(0, 0x8, 0x01015C, 0x445C, 0x445C),
    newAmigaMemEntry(0, 0x7, 0x01A5FC, 0x0D90, 0x0D90),
    newAmigaMemEntry(0, 0x7, 0x01B38C, 0x09E4, 0x09E4),
    newAmigaMemEntry(0, 0x7, 0x01BD70, 0x198A, 0x198A),
    newAmigaMemEntry(0, 0x7, 0x01D6FA, 0x25D2, 0x25D2),
    newAmigaMemEntry(0, 0x8, 0x0145B8, 0x2430, 0x2430),
    newAmigaMemEntry(0, 0x8, 0x0169E8, 0x1316, 0x1316),
    newAmigaMemEntry(0, 0x8, 0x017CFE, 0x0220, 0x0220),
    newAmigaMemEntry(0, 0x8, 0x017F1E, 0x05EA, 0x05EA),
    newAmigaMemEntry(0, 0x8, 0x018508, 0x043C, 0x043C),
    newAmigaMemEntry(0, 0x8, 0x018944, 0x08EA, 0x08EA),
    newAmigaMemEntry(0, 0x8, 0x01922E, 0x1478, 0x1478),
    newAmigaMemEntry(0, 0x8, 0x01A6A6, 0x432E, 0x432E),
    newAmigaMemEntry(0, 0x8, 0x01E9D4, 0x06CE, 0x06CE),
    newAmigaMemEntry(3, 0x9, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x9, 0x000800, 0x0CC6, 0x0CC6),
    newAmigaMemEntry(5, 0x9, 0x0014C6, 0x13B8, 0x13B8),
    newAmigaMemEntry(0, 0x1, 0x038808, 0x189A, 0x189A),
    newAmigaMemEntry(0, 0x1, 0x03A0A2, 0x07D8, 0x07D8),
    newAmigaMemEntry(0, 0x1, 0x03A87A, 0x0462, 0x0462),
    newAmigaMemEntry(0, 0x1, 0x03ACDC, 0x0FA8, 0x0FA8),
    newAmigaMemEntry(0, 0xA, 0x0222CE, 0x672E, 0x672E),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x01F0A2, 0x247C, 0x247C),
    newAmigaMemEntry(1, 0x2, 0x036ABC, 0x08C0, 0x08C0),
    newAmigaMemEntry(1, 0xB, 0x00602E, 0x08C4, 0x3CC0),
    newAmigaMemEntry(0, 0xA, 0x0289FC, 0x4F5A, 0x4F5A),
    newAmigaMemEntry(0, 0xA, 0x02D956, 0x4418, 0x4418),
    newAmigaMemEntry(0, 0xA, 0x031D6E, 0x293C, 0x293C),
    newAmigaMemEntry(0, 0xA, 0x0346AA, 0x3FC8, 0x3FC8),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(2, 0xB, 0x0068F2, 0x2F94, 0x7D00),
    newAmigaMemEntry(2, 0xB, 0x009886, 0x33C0, 0X7D00)
]

const memListAtariEn*: AmigaMemEntries = [
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x1A3C, 0x1A3C),
    newAmigaMemEntry(0, 0x1, 0x001A3C, 0x2E34, 0x2E34),
    newAmigaMemEntry(0, 0x1, 0x004870, 0x69F8, 0x69F8),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x1, 0x00B268, 0x0EFA, 0x0EFA),
    newAmigaMemEntry(0, 0x1, 0x00C162, 0x0D26, 0x0D26),
    newAmigaMemEntry(1, 0x1, 0x00CE88, 0x0494, 0x3CC0),
    newAmigaMemEntry(0, 0x2, 0x000000, 0x2674, 0x2674),
    newAmigaMemEntry(0, 0x1, 0x00D31C, 0x2BB6, 0x2BB6),
    newAmigaMemEntry(0, 0x1, 0x00FED2, 0x2BB4, 0x2BB4),
    newAmigaMemEntry(0, 0x1, 0x012A86, 0x0426, 0x0426),
    newAmigaMemEntry(0, 0x1, 0x012EAC, 0x1852, 0x1852),
    newAmigaMemEntry(0, 0x1, 0x0146FE, 0x0594, 0x0594),
    newAmigaMemEntry(0, 0x1, 0x014C92, 0x13F0, 0x13F0),
    newAmigaMemEntry(0, 0x1, 0x016082, 0x079E, 0x079E),
    newAmigaMemEntry(0, 0x2, 0x002674, 0x56A2, 0x56A2),
    newAmigaMemEntry(6, 0xC, 0x000000, 0x6214, 0x6214),
    newAmigaMemEntry(2, 0x5, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(2, 0x5, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(3, 0x1, 0x016820, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x1, 0x017020, 0x0DD8, 0x0DD8),
    newAmigaMemEntry(5, 0x1, 0x017DF8, 0x1090, 0x1090),
    newAmigaMemEntry(3, 0x1, 0x018E88, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x1, 0x019688, 0x2530, 0x2530),
    newAmigaMemEntry(5, 0x1, 0x01BBB8, 0xFE7A, 0xFE7A),
    newAmigaMemEntry(3, 0x2, 0x007D16, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x2, 0x008516, 0x4C02, 0x4C02),
    newAmigaMemEntry(5, 0x2, 0x00D118, 0xFDBA, 0xFDBA),
    newAmigaMemEntry(3, 0xD, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xD, 0x000800, 0x98B6, 0x98B6),
    newAmigaMemEntry(5, 0xD, 0x00A0B6, 0xD1D8, 0xD1D8),
    newAmigaMemEntry(3, 0x3, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x3, 0x000800, 0xEE5E, 0xEE5E),
    newAmigaMemEntry(5, 0x3, 0x00F65E, 0xFD08, 0xFD08),
    newAmigaMemEntry(3, 0xA, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xA, 0x000800, 0x1B00, 0x1B00),
    newAmigaMemEntry(5, 0xA, 0x002300, 0x5E58, 0x5E58),
    newAmigaMemEntry(3, 0xA, 0x008158, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xA, 0x008958, 0x99DC, 0x99DC),
    newAmigaMemEntry(5, 0xA, 0x012334, 0xFF9A, 0xFF9A),
    newAmigaMemEntry(3, 0xB, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0xB, 0x000800, 0x09F4, 0x09F4),
    newAmigaMemEntry(5, 0xB, 0x0011F4, 0x4E3A, 0x4E3A),
    newAmigaMemEntry(0, 0x1, 0x02BA32, 0x0372, 0x0372),
    newAmigaMemEntry(0, 0x2, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x1, 0x02BDA4, 0x08EA, 0x08EA),
    newAmigaMemEntry(0, 0x1, 0x02C68E, 0x1A46, 0x1A46),
    newAmigaMemEntry(0, 0x2, 0x01CED2, 0x343E, 0x343E),
    newAmigaMemEntry(0, 0x2, 0x020310, 0x149E, 0x149E),
    newAmigaMemEntry(0, 0x2, 0x0217AE, 0x1866, 0x1866),
    newAmigaMemEntry(0, 0x1, 0x02E0D4, 0x0266, 0x0266),
    newAmigaMemEntry(0, 0x1, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x2, 0x023014, 0x01A8, 0x01A8),
    newAmigaMemEntry(0, 0x1, 0x02E33A, 0x1FEC, 0x1FEC),
    newAmigaMemEntry(0, 0x2, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x2, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x2, 0x0231BC, 0x0E2A, 0x0E2A),
    newAmigaMemEntry(0, 0x2, 0x023FE6, 0x0366, 0x0366),
    newAmigaMemEntry(0, 0x2, 0x02434C, 0x0078, 0x0078),
    newAmigaMemEntry(0, 0x2, 0x0243C4, 0x1392, 0x1392),
    newAmigaMemEntry(0, 0x2, 0x025756, 0x06E0, 0x06E0),
    newAmigaMemEntry(0, 0x2, 0x025E36, 0x21AE, 0x21AE),
    newAmigaMemEntry(0, 0x1, 0x030326, 0x04FA, 0x04FA),
    newAmigaMemEntry(0, 0x1, 0x030820, 0x129E, 0x129E),
    newAmigaMemEntry(0, 0x1, 0x031ABE, 0x09B4, 0x09B4),
    newAmigaMemEntry(0, 0x2, 0x027FE4, 0x04EC, 0x04EC),
    newAmigaMemEntry(2, 0x4, 0x000000, 0x2654, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x002654, 0x1920, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x003F74, 0x1A78, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x0059EC, 0x1EC4, 0x7D00),
    newAmigaMemEntry(2, 0x1, 0x032472, 0x045C, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x0078B0, 0x2760, 0x7D00),
    newAmigaMemEntry(2, 0x4, 0x00A010, 0x2B74, 0x7D00),
    newAmigaMemEntry(0, 0x2, 0x0284D0, 0x03C0, 0x03C0),
    newAmigaMemEntry(0, 0x2, 0x028890, 0x13E6, 0x13E6),
    newAmigaMemEntry(0, 0x2, 0x029C76, 0x04DE, 0x04DE),
    newAmigaMemEntry(0, 0x2, 0x02A154, 0x05FA, 0x05FA),
    newAmigaMemEntry(0, 0x2, 0x02A74E, 0x025E, 0x025E),
    newAmigaMemEntry(0, 0x2, 0x02A9AC, 0x0642, 0x0642),
    newAmigaMemEntry(0, 0x2, 0x02AFEE, 0x19D0, 0x19D0),
    newAmigaMemEntry(0, 0x2, 0x02C9BE, 0x00E8, 0x00E8),
    newAmigaMemEntry(0, 0x6, 0x000000, 0x1022, 0x1022),
    newAmigaMemEntry(2, 0x1, 0x0328CE, 0x19FC, 0x7D00),
    newAmigaMemEntry(0, 0x2, 0x02CAA6, 0x58AA, 0x58AA),
    newAmigaMemEntry(0, 0x6, 0x001022, 0x0990, 0x0990),
    newAmigaMemEntry(0, 0x6, 0x0019B2, 0x2C42, 0x2C42),
    newAmigaMemEntry(0, 0x6, 0x0045F4, 0x152C, 0x152C),
    newAmigaMemEntry(0, 0x6, 0x005B20, 0x05B4, 0x05B4),
    newAmigaMemEntry(0, 0x6, 0x0060D4, 0x23B4, 0x23B4),
    newAmigaMemEntry(0, 0x6, 0x008488, 0x1FA4, 0x1FA4),
    newAmigaMemEntry(0, 0x6, 0x00A42C, 0x0D20, 0x0D20),
    newAmigaMemEntry(0, 0x6, 0x00B14C, 0x0528, 0x0528),
    newAmigaMemEntry(0, 0x6, 0x00B674, 0x1608, 0x1608),
    newAmigaMemEntry(0, 0x6, 0x00CC7C, 0x01EA, 0x01EA),
    newAmigaMemEntry(0, 0x6, 0x00CE66, 0x07EA, 0x07EA),
    newAmigaMemEntry(0, 0x6, 0x00D650, 0x00E8, 0x00E8),
    newAmigaMemEntry(0, 0x7, 0x000000, 0x3978, 0x3978),
    newAmigaMemEntry(0, 0x7, 0x003978, 0x1178, 0x1178),
    newAmigaMemEntry(0, 0x7, 0x004AF0, 0x14B0, 0x14B0),
    newAmigaMemEntry(0, 0x7, 0x005FA0, 0x0AA4, 0x0AA4),
    newAmigaMemEntry(0, 0x7, 0x006A44, 0x02DA, 0x02DA),
    newAmigaMemEntry(0, 0x7, 0x006D1E, 0x2674, 0x2674),
    newAmigaMemEntry(0, 0x7, 0x009392, 0x12F0, 0x12F0),
    newAmigaMemEntry(0, 0x7, 0x00A682, 0x5D58, 0x5D58),
    newAmigaMemEntry(0, 0x7, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x2E68, 0x2E68),
    newAmigaMemEntry(0, 0x8, 0x002E68, 0x51C6, 0x51C6),
    newAmigaMemEntry(0, 0x8, 0x00802E, 0x13E6, 0x13E6),
    newAmigaMemEntry(0, 0x8, 0x009414, 0x149E, 0x149E),
    newAmigaMemEntry(0, 0x8, 0x00A8B2, 0x58AA, 0x58AA),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x7, 0x0103DA, 0x0D90, 0x0D90),
    newAmigaMemEntry(0, 0x7, 0x01116A, 0x09E4, 0x09E4),
    newAmigaMemEntry(0, 0x7, 0x011B4E, 0x198A, 0x198A),
    newAmigaMemEntry(0, 0x7, 0x0134D8, 0x25D2, 0x25D2),
    newAmigaMemEntry(0, 0x8, 0x01015C, 0x2430, 0x2430),
    newAmigaMemEntry(0, 0x8, 0x01258C, 0x1316, 0x1316),
    newAmigaMemEntry(0, 0x8, 0x0138A2, 0x0220, 0x0220),
    newAmigaMemEntry(0, 0x8, 0x013AC2, 0x05EA, 0x05EA),
    newAmigaMemEntry(0, 0x8, 0x0140AC, 0x043C, 0x043C),
    newAmigaMemEntry(0, 0x8, 0x0144E8, 0x08EA, 0x08EA),
    newAmigaMemEntry(0, 0x8, 0x014DD2, 0x1478, 0x1478),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x01624A, 0x06CE, 0x06CE),
    newAmigaMemEntry(3, 0x9, 0x000000, 0x0800, 0x0800),
    newAmigaMemEntry(4, 0x9, 0x000800, 0x0CC6, 0x0CC6),
    newAmigaMemEntry(5, 0x9, 0x0014C6, 0x13B8, 0x13B8),
    newAmigaMemEntry(0, 0x1, 0x0342CA, 0x189A, 0x189A),
    newAmigaMemEntry(0, 0x1, 0x035B64, 0x07D8, 0x07D8),
    newAmigaMemEntry(0, 0x1, 0x03633C, 0x0462, 0x0462),
    newAmigaMemEntry(0, 0x1, 0x03679E, 0x0FA8, 0x0FA8),
    newAmigaMemEntry(0, 0xA, 0x0222CE, 0x672E, 0x672E),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(0, 0x8, 0x016918, 0x247C, 0x247C),
    newAmigaMemEntry(1, 0x2, 0x032350, 0x08C0, 0x08C0),
    newAmigaMemEntry(1, 0xB, 0x00602E, 0x08C4, 0x3CC0),
    newAmigaMemEntry(0, 0xA, 0x0289FC, 0x4F5A, 0x4F5A),
    newAmigaMemEntry(0, 0xA, 0x02D956, 0x4418, 0x4418),
    newAmigaMemEntry(0, 0xA, 0x031D6E, 0x293C, 0x293C),
    newAmigaMemEntry(0, 0xA, 0x0346AA, 0x3FC8, 0x3FC8),
    newAmigaMemEntry(0, 0x8, 0x000000, 0x0000, 0x0000),
    newAmigaMemEntry(2, 0xB, 0x0068F2, 0x29C4, 0x7D00),
    newAmigaMemEntry(2, 0xB, 0x0092B6, 0x2C00, 0x7D00),
]
